name: Platform Management
on:
  workflow_dispatch:
    inputs:
      # deleteRG:
      #   description: 'Delete Resource Group'
      #   type: boolean
      #   required: true
      provisionConnectivity:
        description: 'Provision Connectivity'
        type: boolean
        required: false
      provisionCommonServices:
        description: 'Provision Common Services Resources'
        type: boolean
        required: false
      location:
        description: 'Resource Group location'
        required: true
        default: 'westus3'
        type: string
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - production

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read  # This is required for actions/checkout

jobs:

  # Delete_Resources:
  #   name: Delete Connectivity Resources
  #   runs-on: ubuntu-latest
  #   if: |
  #     github.event.inputs.deleteRG == 'true' ||
  #     (github.event_name == 'push' && github.ref == 'refs/heads/dev')
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v2
  #     - name: OIDC Login to Azure
  #       uses: azure/login@v1
  #       with:
  #         client-id: ${{ secrets.AZURE_CLIENT_ID }}
  #         tenant-id: ${{ secrets.AZURE_TENANT_ID }}
  #         subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  #     - name: Delete Resources
  #       id: task-delete-resources
  #       run: |

  #         # Add Dev prefix
  #         target_env=${{github.event.inputs.environment}}
  #         prefix=''

  #         if [ target_env == "dev" ]; then
  #           prefix="DEV_"
  #         fi
  #         # Get Resource Group region
  #         rg_region=${{github.event.inputs.location}}
  #         rg_name=${prefix}rg_connectivity_${rg_region}

  #         {
  #           echo deleting resource group $rg_name
  #           az group delete --name $rg_name --yes &&
  #           echo echo done deleting resource group $rg_name
  #         } || {
  #           echo failed deleting resource group $rg_name
  #         }

  Connectivity_Resources:
    name: Create Connectivity Resources
    runs-on: ubuntu-latest
    if: |
      !failure() && !cancelled() &&
      (
        github.event.inputs.provisionConnectivity == 'true' ||
        (github.event_name == 'push' && github.ref == 'refs/heads/dev')
      )
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: OIDC Login to Azure
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      - name: Create Resources
        id: task-create-resources
        run: |

          # Get params
          target_env=${{github.event.inputs.environment}}
          location=${{github.event.inputs.location}}

          echo create connectivity rg in $location
          ./script/devops.sh provision --name core --location "$location"
          # ./script/devops provision network_hub --name "$hub_name" --location "$location"
          # ./pipelines/management/connectivity.sh --rg_region $location --target_env $target_env

  Common_Services_Resources:
    name: Create Common Services Resources
    runs-on: ubuntu-latest
    needs: Delete_Resources
    if: |
      !failure() && !cancelled() &&
      (
        github.event.inputs.provisionCommonServices == 'true' ||
        (github.event_name == 'push' && github.ref == 'refs/heads/dev')
      )
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: OIDC Login to Azure
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      - name: Create Resources
        id: task-create-resources
        run: |

          # Get params
          target_env=${{github.event.inputs.environment}}
          rg_region=${{github.event.inputs.location}}

          echo create $target_env common services rg in $rg_region
          ./pipelines/management/common_services.sh --rg_region $rg_region --target_env $target_env

  # Migrate_Database:
  #   runs-on: ubuntu-latest
