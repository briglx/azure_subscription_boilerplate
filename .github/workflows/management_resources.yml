name: Management RG Deployment
on:
  workflow_dispatch:
    inputs:
      location:
        description: 'Resource Group location'
        required: true
        default: 'westus2'
        type: string
  
jobs:

  Connectivity_Resources:
    name: Create Connectivity Resources
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{secrets.AZURE_CREDENTIALS}}
      - name: Create Resources
        id: task-create-resources
        uses: azure/CLI@v1
        with:
          azcliversion: 2.30.0
          inlineScript: |
            {
              
              #######################################################
              # Connectivity RG
              #######################################################
              # Resource Group
              rg_region=westus2
              rg_name=rg_connectivity_$rg_region

              # Core VNet
              vnet_core=vnet-core-$rg_region
              vnet_core_prefix='10.0.0.0/16'
              subnet_aad_ds=snet-add-ds # Core - Azure AD Domain Services subnet
              subnet_aad_ds_prefix='10.0.255.0/27'
              subnet_bastion=AzureBastionSubnet
              subnet_bastion_prefix='10.0.255.64/27'

              # Development VNet 
              vnet_dev=vnet-dev-$rg_region
              vnet_dev_prefix='10.1.0.0/16'
              subnet_dev=snet-dev
              subnet_dev_prefix='10.1.1.0/24'

              $deployment_script = "pipelines/management/connectivity.sh"

              sh $deployment_script
              
              
            } || {
              echo Failed creating connectivity resource group 
            }

  Invoke_AutomationAccountPostDeployment:
    name: Invoke Automation Account Post Deployment
    needs: Invoke_WVDKeyVaultPostDeployment
    if: |
      !failure() && !cancelled() && 
      (github.event.inputs.enablePostDeploymentAutomationAccount == 'true')
    runs-on: windows-latest
    env:
      ScalingRunbookName: ScalingRunbook
      ScalingWebhookName: AVDAutoScaleWebhook
      RunAsConnectionSPName: avd_scaling_run_as_sp
      RunAsSelfSignedCertSecretName : avdScalingRunAsPrincipalCert-Secret 
      

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Set Environment Variables
        uses: ./.github/actions/setvars
        with:
          source: ./.github/variables/globals.env
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{secrets.AZURE_CREDENTIALS}}
          enable-AzPSSession: true
      - name: Get KeyVault Name
        id: task-get-keyvault-name
        uses: azure/powershell@v1
        with:
          inlineScript: |
            Write-Verbose "Getting KeyVault Name" -Verbose
            
            Write-Verbose "Calling Get-AzKeyVault -ResourceGroupName '${{ github.event.inputs.resourceGroupName }}'" -Verbose
            $KeyVault = Get-AzKeyVault -ResourceGroupName "${{ github.event.inputs.resourceGroupName }}"

            Write-Verbose ("Key Vault Name is {0}" -f $KeyVault.VaultName) -Verbose

            Write-Verbose "Setting environment variable KeyVaultName=$($KeyVault.VaultName) to $Env:GITHUB_ENV" -Verbose
            echo "KeyVaultName=$($KeyVault.VaultName)" >> $Env:GITHUB_ENV
          azPSVersion: "latest"
      - name: Trigger module AutomationAccount post-deployment
        uses: azure/powershell@v1
        with:
          inlineScript: |
            Write-Verbose "Load function" -Verbose
            . '${{ env.orchestrationFunctionsPath }}/GeneralDeployment/Invoke-AutomationAccountPostDeployment.ps1'

            $functionInput = @{
              orchestrationFunctionsPath         = '${{ env.orchestrationFunctionsPath }}'
              AutomationAccountName              = '${{ env.automationAccountName }}'
              AutomationAccountRGName            = '${{ github.event.inputs.resourceGroupName }}'
              ScalingRunbookName                 = '${{ env.ScalingRunbookName }}'
              WebhookName                        = '${{ env.ScalingWebhookName }}'
              RunAsConnectionSPName              = '${{ env.RunAsConnectionSPName }}'
              KeyVaultName                       = $Env:KeyVaultName
              RunAsSelfSignedCertSecretName      = '${{ env.RunAsSelfSignedCertSecretName }}'
              RunAsSelfSignedCertSecret          = '${{ secrets.RUN_AS_CERT_SECRET }}'
              RunAsAppServicePrincipalId         = '${{ secrets.RunAsAppServicePrincipalId }}'
              RunAsTenantId                      = '${{ secrets.RunAsTenantId }}'
              RunAsCertificateThumbprint         = '${{ secrets.RunAsCertificateThumbprint }}'
              RunAsSubscriptionId                = '${{ secrets.RunAsSubscriptionId }}'
              LAWorkspaceName                    = '${{ env.LAWorkspaceName }}'
            }

            Write-Verbose "Invoke task with" -Verbose
            $functionInput.Keys | ForEach-Object { Write-Verbose ("PARAMETER: `t'{0}' with value '{1}'" -f $_, $functionInput[$_]) -Verbose }

            Invoke-AutomationAccountPostDeployment @functionInput -Verbose
          azPSVersion: "latest"